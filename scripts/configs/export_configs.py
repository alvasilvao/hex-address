#!/usr/bin/env python3
"""
Configuration Export System

Exports configurations from shared/configs to both Python and JavaScript packages.
This ensures both packages have access to the same configuration data.
"""

import json
import os
import shutil
from pathlib import Path
from typing import Dict, List, Any

class ConfigExporter:
    """Exports configurations to both Python and JavaScript packages."""
    
    def __init__(self, repo_root: str = None):
        if repo_root is None:
            repo_root = Path(__file__).parent.parent.parent
        
        self.repo_root = Path(repo_root)
        self.shared_configs_dir = self.repo_root / "configs"
        self.python_configs_dir = self.repo_root / "packages" / "python" / "src" / "h3_syllable" / "configs"
        self.js_configs_dir = self.repo_root / "packages" / "javascript" / "src" / "configs"
        
        # Ensure directories exist
        self.python_configs_dir.mkdir(parents=True, exist_ok=True)
        self.js_configs_dir.mkdir(parents=True, exist_ok=True)
    
    def export_all_configs(self):
        """Export all configurations to both packages."""
        print("üöÄ Exporting configurations...")
        
        # Get all JSON config files
        config_files = list(self.shared_configs_dir.glob("*.json"))
        
        if not config_files:
            print("‚ö†Ô∏è  No configuration files found in configs/")
            return
        
        # Export to Python
        self._export_to_python(config_files)
        
        # Export to JavaScript
        self._export_to_javascript(config_files)
        
        print(f"‚úÖ Successfully exported {len(config_files)} configurations")
    
    def _export_to_python(self, config_files: List[Path]):
        """Export configurations to Python package."""
        print("üì¶ Exporting to Python package...")
        
        # Copy all JSON files directly
        for config_file in config_files:
            dest_file = self.python_configs_dir / config_file.name
            shutil.copy2(config_file, dest_file)
        
        # Create Python config index
        self._create_python_config_index(config_files)
        
        print(f"  ‚úÖ Python: {len(config_files)} configs exported")
    
    def _export_to_javascript(self, config_files: List[Path]):
        """Export configurations to JavaScript package."""
        print("üì¶ Exporting to JavaScript package...")
        
        # Copy all JSON files directly
        for config_file in config_files:
            dest_file = self.js_configs_dir / config_file.name
            shutil.copy2(config_file, dest_file)
        
        # Create JavaScript config index
        self._create_javascript_config_index(config_files)
        
        print(f"  ‚úÖ JavaScript: {len(config_files)} configs exported")
    
    def _create_python_config_index(self, config_files: List[Path]):
        """Create Python configuration index file."""
        configs_info = []
        
        for config_file in config_files:
            try:
                with open(config_file, 'r') as f:
                    config_data = json.load(f)
                
                config_info = {
                    'filename': config_file.name,
                    'name': config_data.get('name', config_file.stem),
                    'description': config_data.get('description', ''),
                    'consonants_count': len(config_data.get('consonants', [])),
                    'vowels_count': len(config_data.get('vowels', [])),
                    'address_length': config_data.get('address_length', 8),
                    'max_consecutive': config_data.get('max_consecutive', 2),
                    'identifier': config_data.get('metadata', {}).get('identifier', ''),
                    'auto_generated': config_data.get('metadata', {}).get('auto_generated', False)
                }
                
                configs_info.append(config_info)
                
            except Exception as e:
                print(f"‚ö†Ô∏è  Warning: Could not process {config_file.name}: {e}")
        
        # Write Python config index
        index_content = f'''"""
Configuration Index - Auto-generated

This file is automatically generated by scripts/configs/export_configs.py
Do not edit manually.
"""

AVAILABLE_CONFIGS = {json.dumps(configs_info, indent=2)}

def get_config_info(config_name: str):
    """Get information about a configuration."""
    for config in AVAILABLE_CONFIGS:
        if config['name'] == config_name or config['filename'] == config_name:
            return config
    return None

def list_configs():
    """List all available configuration names."""
    return [config['name'] for config in AVAILABLE_CONFIGS]

def list_config_files():
    """List all configuration filenames."""
    return [config['filename'] for config in AVAILABLE_CONFIGS]
'''
        
        with open(self.python_configs_dir / "config_index.py", 'w') as f:
            f.write(index_content)
    
    def _create_javascript_config_index(self, config_files: List[Path]):
        """Create JavaScript configuration index file."""
        configs_info = []
        
        for config_file in config_files:
            try:
                with open(config_file, 'r') as f:
                    config_data = json.load(f)
                
                config_info = {
                    'filename': config_file.name,
                    'name': config_data.get('name', config_file.stem),
                    'description': config_data.get('description', ''),
                    'consonantsCount': len(config_data.get('consonants', [])),
                    'vowelsCount': len(config_data.get('vowels', [])),
                    'addressLength': config_data.get('address_length', 8),
                    'maxConsecutive': config_data.get('max_consecutive', 2),
                    'identifier': config_data.get('metadata', {}).get('identifier', ''),
                    'autoGenerated': config_data.get('metadata', {}).get('auto_generated', False)
                }
                
                configs_info.append(config_info)
                
            except Exception as e:
                print(f"‚ö†Ô∏è  Warning: Could not process {config_file.name}: {e}")
        
        # Write JavaScript config index
        index_content = f'''/**
 * Configuration Index - Auto-generated
 * 
 * This file is automatically generated by scripts/configs/export_configs.py
 * Do not edit manually.
 */

export const AVAILABLE_CONFIGS = {json.dumps(configs_info, indent=2)};

export function getConfigInfo(configName: string) {{
  return AVAILABLE_CONFIGS.find(config => 
    config.name === configName || config.filename === configName
  );
}}

export function listConfigs(): string[] {{
  return AVAILABLE_CONFIGS.map(config => config.name);
}}

export function listConfigFiles(): string[] {{
  return AVAILABLE_CONFIGS.map(config => config.filename);
}}
'''
        
        with open(self.js_configs_dir / "config-index.ts", 'w') as f:
            f.write(index_content)
    
    def validate_export(self) -> bool:
        """Validate that the export was successful."""
        python_files = list(self.python_configs_dir.glob("*.json"))
        js_files = list(self.js_configs_dir.glob("*.json"))
        shared_files = list(self.shared_configs_dir.glob("*.json"))
        
        print(f"üìä Validation details:")
        print(f"  Shared configs: {len(shared_files)}")
        print(f"  Python configs: {len(python_files)}")
        print(f"  JavaScript configs: {len(js_files)}")
        
        if len(python_files) != len(shared_files):
            print(f"‚ùå Python export incomplete: {len(python_files)} != {len(shared_files)}")
            return False
        
        if len(js_files) != len(shared_files):
            print(f"‚ùå JavaScript export incomplete: {len(js_files)} != {len(shared_files)}")
            return False
        
        # Check index files exist
        if not (self.python_configs_dir / "config_index.py").exists():
            print("‚ùå Python config index missing")
            return False
        
        if not (self.js_configs_dir / "config-index.ts").exists():
            print("‚ùå JavaScript config index missing")
            return False
        
        print("‚úÖ Export validation successful")
        return True

def main():
    """Main export function."""
    exporter = ConfigExporter()
    exporter.export_all_configs()
    
    if exporter.validate_export():
        print("üéâ Configuration export completed successfully!")
    else:
        print("‚ùå Configuration export validation failed!")
        exit(1)

if __name__ == "__main__":
    main()